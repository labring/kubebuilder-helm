package rbac_test

import (
	"os"

	"github.com/labring/kubebuilder4helm/internal/rbac"

	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"

	"sigs.k8s.io/controller-tools/pkg/genall"
	"sigs.k8s.io/controller-tools/pkg/loader"
	"sigs.k8s.io/controller-tools/pkg/markers"
)

var _ = Describe("ClusterRole generated by the RBAC Generator", func() {
	// run this test multiple times to make sure the Rule order is stable.
	const stableTestCount = 5
	for i := 0; i < stableTestCount; i++ {
		It("should match the expected result", func() {
			By("switching into testdata to appease go modules")
			cwd, err := os.Getwd()
			Expect(err).NotTo(HaveOccurred())
			Expect(os.Chdir("./testdata")).To(Succeed()) // go modules are directory-sensitive
			defer func() { Expect(os.Chdir(cwd)).To(Succeed()) }()

			By("loading the roots")
			pkgs, err := loader.LoadRoots(".")
			Expect(err).NotTo(HaveOccurred())

			By("registering RBAC rule marker")
			reg := &markers.Registry{}
			Expect(reg.Register(rbac.RuleDefinition)).To(Succeed())

			By("creating GenerationContext")
			ctx := &genall.GenerationContext{
				Collector: &markers.Collector{Registry: reg},
				Roots:     pkgs,
			}

			By("generating a ClusterRole")
			objs, err := rbac.GenerateRoles(ctx, "helm-project")
			Expect(err).NotTo(HaveOccurred())
			Expect(objs).NotTo(BeNil())
		})
	}
})
